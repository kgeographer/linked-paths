#!wing
#!version=5.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': '4WOC6bNY5rWnBMW5yAOE4HOSSA'\
        '7StP5b',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   1],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [(0,)],
                                 'selected-nodes': [],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        u'c': [],
        u'django': [],
        u'html': [],
        u'py': []}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [0],
        'notebook_display': 'normal',
        'notebook_percent': 0.2968960863697706,
        'override_title': None,
        'pagelist': [('python-shell',
                      'wide',
                      1,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 92,
                       'folded-linenos': [],
                       'history': {None: ['global proj, reader_p, reader_s, '\
        'finp, fins, fout, foutp, fouts, collection, collectionAttributes, r'\
        'outeidx\n',
        "proj = 'roundabout'\n",
        "data = 'roundabout'\n",
        'finp\n',
        "fout = codecs.open('../_site/data/'+data+'.geojson', 'w', 'utf8')\n",
        "reader_p = csv.DictReader(filter(lambda row: row[0]!='#', finp), de"\
        "limiter=';')\n",
        "req_p = ['collection', 'place_id', 'toponym', 'gazetteer_uri', 'gaz"\
        "etteer_label', 'lng', 'lat']\nreq_s = ['collection', 'route_id', 's"\
        "egment_id', 'source', 'target', 'label', 'geometry', \\\n          "\
        "                             'timespan', 'duration','follows']\n",
        "dir = os.getcwd() + '/data/'\n",
        "global proj, reader_p, reader_s, finp, fins, fout, foutp, fouts, co"\
        "llection, collectionAttributes, routeidx\n# owtrad, courier, incant"\
        "o-f, incanto-j, roundabout, vicarello, xuanzang\nproj = 'roundabout"\
        "'\ndata = 'roundabout'\n",
        "finp = codecs.open('../data/source/'+proj+'/places_'+proj+'.csv', '"\
        "r', 'utf8')\nfins = codecs.open('../data/source/'+proj+'/segments_'"\
        "+data+'.csv', 'r', 'utf8')\nfout = codecs.open('../_site/data/'+dat"\
        "a+'.geojson', 'w', 'utf8')\n# NOTE: demo uses manually edited place"\
        " records\n",
        "foutp = codecs.open('../_site/data/index/'+proj+'.jsonl', 'w', 'utf"\
        "8')\n",
        "fouts = codecs.open('../_site/data/index/'+data+'_seg.jsonl', 'w', "\
        "'utf8')\n",
        "reader_p = csv.DictReader(filter(lambda row: row[0]!='#', finp), de"\
        "limiter=';')\nreader_s = csv.DictReader(filter(lambda row: row[0]!="\
        "'#', fins), delimiter=';')\n",
        "req_p = ['collection', 'place_id', 'toponym', 'gazetteer_uri', 'gaz"\
        "etteer_label', 'lng', 'lat']\n",
        "req_s = ['collection', 'route_id', 'segment_id', 'source', 'target'"\
        ", 'label', 'geometry', \\\n                                       '"\
        "timespan', 'duration','follows']\n",
        "reader_attr = csv.reader(filter(lambda row: row[0]=='#', fins), del"\
        "imiter=';')\n",
        'reader_attr\n',
        'collectionAttributes = {}\n',
        "for row in reader_attr:\n    field = re.match(r'#(.*?):(.*)', row[0"\
        "]).group(1).lstrip()\n    value = re.match(r'#(.*?):(.*$)', row[0])"\
        ".group(2).lstrip()\n    collectionAttributes[field] = value\n",
        "collection = {\n    \"type\":\"FeatureCollection\",\n    \"attribut"\
        "es\": collectionAttributes,\n    # NOTE: line 54 used for courier, "\
        "the only one with a \"periods\" object now\n    #\"when\": {\"times"\
        "pan\": collectionAttributes['timespan'][1:-1].split(','), \"periods"\
        "\": collectionAttributes['periods']},\n    \"when\": {\"timespan\""\
        ": collectionAttributes['timespan'][1:-1].split(',')},\n    \"featur"\
        "es\": []\n    }\n",
        'collection.when\n',
        'collectionAttributes\n',
        "collectionAttributes['when']\n",
        "collectionAttributes['timespan']\n",
        "collectionAttributes['timespan'][1:-1].split(',')\n",
        "collection['attributes']\n",
        "collection['when']\n",
        "if not reader_p.fieldnames[:7] == req_p:\n    sys.exit('core place "\
        "field names incorrect. You have: \\n' + str(reader_p.fieldnames))\n",
        'fins.seek(0)\n',
        "print('Project: ' + proj + ', Data: ' + data)\n",
        'createSegments()\n',
        'collection\n',
        'inti()\n',
        "finp = codecs.open('../data/source/'+proj+'/places_'+proj+'.csv', '"\
        "r', 'utf8')\n",
        "finp = codecs.open('data/source/'+proj+'/places_'+proj+'.csv', 'r',"\
        " 'utf8')\n",
        'init()\n',
        'createPlaces()\n',
        'import os, sys, csv, json, codecs, re, copy\n',
        'places = []\n',
        "def toPoint(row):\n    return {\n        'type': 'Point',\n        "\
        "'coordinates': [ float(row['lng']), float(row['lat']) ]\n        #'"\
        "coordinates': [ row['lng'], row['lat'] ]\n    }\n",
        "def parseNames(row):\n    arr = row['gazetteer_label'].split('/') i"\
        "f row['gazetteer_label'] != '' else []\n    arr.append(row['toponym"\
        "'])\n    return arr\n",
        "for idx, row in enumerate(reader_p):\n    feat = {\"type\":\"Featur"\
        "e\", \\\n            \"id\": row['place_id'], \\\n            \"lab"\
        "el\": row['toponym'], \\\n            \"geometry\":toPoint(row), \\"\
        "\n            \"properties\": { \\\n                \"collection\""\
        ": row['collection'], \\\n                \"toponym\": row['toponym'"\
        "], \\\n                \"gazetteer_uri\": row['gazetteer_uri'], \\"\
        "\n                \"gazetteer_label\": row['gazetteer_label']\n    "\
        "        }\n            }\n    # remaining segment properties (colum"\
        "ns after 8th)\n    props = reader_p.fieldnames[7:]\n    for x in ra"\
        "nge(len(props)):\n        feat['properties'][props[x]] = row[props["\
        "x]]\n    collection['features'].append(feat)\n",
        'finp.seek(0) # resets dict.reader\n',
        'next(reader_p, None) # skip header\n',
        'reader_p\n',
        'reader_p.fieldnames\n',
        "for row in reader_p:\n    place = {\n        \"id\": row['place_id'"\
        "],\n        \"representative_title\": row['toponym'],\n        \"re"\
        "presentative_geometry\": \"\",\n        \"representative_point\": ["\
        "float(row['lng']),float(row['lat'])],\n        \"temporal_bounds_un"\
        "ion\": collectionAttributes['timespan'][1:-1].split(','),\n        "\
        "\"suggest\": parseNames(row),\n        \"is_conflation_of\": [{\n  "\
        "          \"id\": row['place_id'],\n            \"uri\": row['gazet"\
        "teer_uri'],\n            \"source_gazetteer\": row['collection'],\n"\
        "            \"title\": row['toponym'],\n            \"descriptions"\
        "\": [{\"description\":\"\", \"language\":\"\"}],\n            \"nam"\
        "es\": [{\"name\":row['toponym'], \"language\":\"\"}],\n            "\
        "\"temporal_bounds\": \"\",\n            \"place_types\":\"\",\n    "\
        "        \"close_matches\":\"\",\n            \"exact_matches\":\"\""\
        "\n          }]\n        }\n    places.append(place)\n",
        'places\n',
        'foutp\n',
        'for x in range(len(places)):\n',
        'len(places)\n',
        "for x in range(len(places)):\n    foutp.write(json.dumps(places[x])"\
        " + '\\n')\n",
        'foutp.close()\n',
        'fout.write(json.dumps(collection,indent=2))\n',
        'fout.close()\n']},
                       'launch-id': None,
                       'sel-line': 102,
                       'sel-line-start': 1003205,
                       'selection_end': 1003205,
                       'selection_start': 1003205}),
                     ('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u';',
                                       'fReverse': False,
                                       'fSearchText': u'fout',
                                       'fStartPos': 0,
                                       'fStyle': 'regex',
                                       'fWholeWords': True,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      1,
                      {}),
                     ('debug-watch',
                      'wide',
                      1,
                      {}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      1,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {}),
                     ('versioncontrol.git',
                      'wide',
                      0,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('../../../../../Applications/WingIDE.app/Contents/Resources/resources/doc/en/TOC.idx'),
        {'displayed-index': -1,
         'viewer-state': {'history': [-1,
                                      27],
                          'history-pos': 0,
                          'index': -1,
                          'top': 0}},
        1488672265.077382],
        [loc('../../../../../Applications/WingIDE.app/Contents/Resources/resources/doc/en/TOC.idx'),
         {'displayed-index': 27,
          'viewer-state': {'history': [-1,
                                       27],
                           'history-pos': 1,
                           'index': 27,
                           'top': 0}},
         1488672343.428308],
        [loc('py/csvToGeoJSON-T.py'),
         {'attrib-starts': [('init',
                             8)],
          'first-line': 22,
          'folded-linenos': [],
          'sel-line': 40,
          'sel-line-start': 1816,
          'selection_end': 1882,
          'selection_start': 1878},
         1488672638.087057],
        [loc('py/csvToGeoJSON-T.py'),
         {'attrib-starts': [('init',
                             8)],
          'first-line': 22,
          'folded-linenos': [],
          'sel-line': 43,
          'sel-line-start': 1931,
          'selection_end': 1940,
          'selection_start': 1936},
         1488672640.203552],
        [loc('py/csvToGeoJSON-T.py'),
         {'attrib-starts': [('init',
                             8)],
          'first-line': 32,
          'folded-linenos': [],
          'sel-line': 62,
          'sel-line-start': 2768,
          'selection_end': 2777,
          'selection_start': 2773},
         1488672641.866864],
        [loc('py/csvToGeoJSON-T.py'),
         {'attrib-starts': [],
          'first-line': 114,
          'folded-linenos': [142],
          'sel-line': 261,
          'sel-line-start': 9595,
          'selection_end': 9609,
          'selection_start': 9595},
         1488675714.005095],
        [loc('../../../../../usr/local/var/pyenv/versions/3.4.3/lib/python3.4/codecs.py'),
         {'attrib-starts': [('StreamWriter',
                             342),
                            ('StreamWriter.__init__',
                             344)],
          'first-line': 343,
          'folded-linenos': [],
          'sel-line': 367,
          'sel-line-start': 12388,
          'selection_end': 12388,
          'selection_start': 12388},
         1488675724.706277],
        [loc('py/csvToGeoJSON-T.py'),
         {'attrib-starts': [],
          'first-line': 120,
          'folded-linenos': [142],
          'sel-line': 261,
          'sel-line-start': 9595,
          'selection_end': 9609,
          'selection_start': 9595},
         1488675743.792288],
        [loc('../../../../../usr/local/var/pyenv/versions/3.4.3/lib/python3.4/codecs.py'),
         {'attrib-starts': [('StreamWriter',
                             342),
                            ('StreamWriter.write',
                             368)],
          'first-line': 343,
          'folded-linenos': [],
          'sel-line': 373,
          'sel-line-start': 12554,
          'selection_end': 12554,
          'selection_start': 12554},
         1488675758.732419],
        [loc('py/csvToGeoJSON-T.py'),
         {'attrib-starts': [],
          'first-line': 120,
          'folded-linenos': [142],
          'sel-line': 261,
          'sel-line-start': 9595,
          'selection_end': 9609,
          'selection_start': 9595},
         1488675760.702212],
        [loc('../../../../../usr/local/var/pyenv/versions/3.4.3/lib/python3.4/codecs.py'),
         {'attrib-starts': [('StreamWriter',
                             342),
                            ('StreamWriter.write',
                             368)],
          'first-line': 343,
          'folded-linenos': [],
          'sel-line': 373,
          'sel-line-start': 12554,
          'selection_end': 12554,
          'selection_start': 12554},
         1488675762.489971],
        [loc('py/csvToGeoJSON-T.py'),
         {'attrib-starts': [('init',
                             8)],
          'first-line': 6,
          'folded-linenos': [142],
          'sel-line': 25,
          'sel-line-start': 1073,
          'selection_end': 1073,
          'selection_start': 1073},
         1488675846.840423],
        [loc('../../../../../usr/local/var/pyenv/versions/3.4.3/lib/python3.4/codecs.py'),
         {'attrib-starts': [('open',
                             857)],
          'first-line': 860,
          'folded-linenos': [],
          'sel-line': 890,
          'sel-line-start': 29493,
          'selection_end': 29493,
          'selection_start': 29493},
         1488675863.077686],
        [loc('py/csvToGeoJSON-T.py'),
         {'attrib-starts': [('init',
                             8)],
          'first-line': 0,
          'folded-linenos': [142],
          'sel-line': 9,
          'sel-line-start': 302,
          'selection_end': 3029,
          'selection_start': 302},
         1488675923.066509],
        [loc('../../../../../usr/local/var/pyenv/versions/3.4.3/lib/python3.4/codecs.py'),
         {'attrib-starts': [('open',
                             857)],
          'first-line': 860,
          'folded-linenos': [],
          'sel-line': 890,
          'sel-line-start': 29493,
          'selection_end': 29493,
          'selection_start': 29493},
         1488675928.172009],
        [loc('py/csvToGeoJSON-T.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [142],
          'sel-line': 7,
          'sel-line-start': 289,
          'selection_end': 3029,
          'selection_start': 289},
         1488675943.69742],
        [loc('../../../../../usr/local/var/pyenv/versions/3.4.3/lib/python3.4/codecs.py'),
         {'attrib-starts': [('open',
                             857)],
          'first-line': 821,
          'folded-linenos': [],
          'sel-line': 890,
          'sel-line-start': 29493,
          'selection_end': 29493,
          'selection_start': 29493},
         1488675955.740713],
        [loc('py/csvToGeoJSON-T.py'),
         {'attrib-starts': [('init',
                             8)],
          'first-line': 0,
          'folded-linenos': [142],
          'sel-line': 15,
          'sel-line-start': 565,
          'selection_end': 647,
          'selection_start': 565},
         1488675970.922978],
        [loc('../../../../../usr/local/var/pyenv/versions/3.4.3/lib/python3.4/codecs.py'),
         {'attrib-starts': [('open',
                             857)],
          'first-line': 860,
          'folded-linenos': [],
          'sel-line': 890,
          'sel-line-start': 29493,
          'selection_end': 29493,
          'selection_start': 29493},
         1488675972.910587],
        [loc('py/csvToGeoJSON-T.py'),
         {'attrib-starts': [('createSegments',
                             142)],
          'first-line': 225,
          'folded-linenos': [70],
          'sel-line': 255,
          'sel-line-start': 9488,
          'selection_end': 9496,
          'selection_start': 9492},
         1488676395.443006]],
        20),
        'current-loc': loc('py/csvToGeoJSON-T.py'),
        'editor-state-list': [(loc('py/csvToGeoJSON-T.py'),
                               {'attrib-starts': [('init',
        8)],
                                'first-line': 5,
                                'folded-linenos': [70],
                                'sel-line': 33,
                                'sel-line-start': 1409,
                                'selection_end': 1580,
                                'selection_start': 1422}),
                              (loc('../../../../../usr/local/var/pyenv/versions/3.4.3/lib/python3.4/codecs.py'),
                               {'attrib-starts': [('open',
        857)],
                                'first-line': 860,
                                'folded-linenos': [],
                                'sel-line': 890,
                                'sel-line-start': 29493,
                                'selection_end': 29493,
                                'selection_start': 29493})],
        'has-focus': True,
        'locked': False},
        [loc('py/csvToGeoJSON-T.py'),
         loc('../../../../../usr/local/var/pyenv/versions/3.4.3/lib/python3.4/codecs.py')]),
                               'open_files': [u'py/csvToGeoJSON-T.py']},
        'saved_notebook_display': None,
        'split_percents': {},
        'splits': 1,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         23,
                         1420,
                         810)}]}
guimgr.recent-documents = [loc('py/csvToGeoJSON-T.py'),
                           loc('../../../../../usr/local/var/pyenv/versions/3.4.3/lib/python3.4/codecs.py')]
guimgr.visual-state = {loc('../../../../../usr/local/var/pyenv/versions/3.4.3/lib/python3.4/codecs.py'): {'a'\
        'ttrib-starts': [('StreamWriter',
                          342),
                         ('StreamWriter.__init__',
                          344)],
        'first-line': 343,
        'folded-linenos': [],
        'sel-line': 367,
        'sel-line-start': 12388,
        'selection_end': 12388,
        'selection_start': 12388}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('default',
                        [u''])}
proj.pyexec = {None: ('custom',
                      u'/usr/local/var/pyenv/versions/3.4.3/bin/python')}
proj.pypath = {None: ('custom',
                      u'/usr/local/var/pyenv/versions/3.4.3/:')}
search.search-history = [u'fout',
                         u'fins']
testing.stored-results = (1,
                          [],
                          {})
